services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres-99tech
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: 99tech_challenge
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Express.js API Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production  # Use production stage for consistency
    container_name: express-99tech
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: password
      DB_DATABASE: 99tech_challenge
      DB_SYNCHRONIZE: true
      DB_LOGGING: true
      PORT: 3000
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    volumes:
      - .:/app
      - /app/node_modules
    command: yarn dev

  # pgAdmin (Optional - for database management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin-99tech
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@99tech.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - app-network
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local

networks:
  app-network:
    driver: bridge